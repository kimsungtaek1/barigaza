rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ─────────────────────────────
    // 유틸리티 함수
    // ─────────────────────────────
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidDate(dateField) {
      return dateField != null &&
             dateField is timestamp &&
             dateField <= request.time;
    }

    function isAdminRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'master'];
    }

    function isMasterRole() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'master';
    }

    // ─────────────────────────────
    // 차량 정보 관련 규칙
    // ─────────────────────────────
    function isValidVehicleInfo() {
      let data = request.resource.data;
      return (
        (!data.keys().hasAny(['vehicleInfo'])) ||
        (
          data.vehicleInfo.manufacturer is string &&
          data.vehicleInfo.model is string &&
          data.vehicleInfo.name is string &&
          (data.vehicleInfo.number == null || data.vehicleInfo.number is string) &&
          data.vehicleInfo.lastUpdated is timestamp &&
          data.vehicleInfo.image is string
        )
      );
    }

    // ─────────────────────────────
    // 연비 기록 검증
    // ─────────────────────────────
    function isValidFuelRecord() {
      let data = request.resource.data;
      return (
        (!data.keys().hasAny(['fuelRecords'])) ||
        (
          data.fuelRecords is list &&
          data.fuelRecords[data.fuelRecords.size() - 1].date is timestamp &&
          data.fuelRecords[data.fuelRecords.size() - 1].liters is number &&
          data.fuelRecords[data.fuelRecords.size() - 1].kilometers is number &&
          data.fuelRecords[data.fuelRecords.size() - 1].efficiency is number
        )
      );
    }

    // ─────────────────────────────
    // 이벤트 컬렉션 규칙
    // ─────────────────────────────
    match /events/{eventId} {
      function isValidEvent() {
        let data = request.resource.data;
        return
          data.title is string &&
          data.content is string && // Added content check
          data.imageUrl is string && // Assuming imageUrl is required now, adjust if optional
          data.startDate is timestamp &&
          data.endDate is timestamp &&
          data.isActive is bool &&
          (data.createdAt is timestamp || request.method == 'create') && // Allow createdAt on create
          (!data.keys().hasAny(['updatedAt']) || data.updatedAt is timestamp) && // Allow updatedAt on update
          (!data.keys().hasAny(['location']) || data.location is string || data.location == null) && // Allow location (string or null)
          (!data.keys().hasAny(['link']) || data.link is string || data.link == null); // Allow link (string or null)
          // Removed subtitle check
      }

      allow read: if true;
      allow create: if isAuthenticated() &&
                   isAdminRole() &&
                   isValidEvent();
      allow update: if isAuthenticated() &&
                   isAdminRole() &&
                   isValidEvent();
      allow delete: if isAuthenticated() &&
                   isAdminRole();
    }

    // ─────────────────────────────
    // 사용자 컬렉션 규칙
    // ─────────────────────────────
    match /users/{userId} {
      function hasRequiredUserFields() {
        let data = request.resource.data;
        return data.email is string &&
               data.nickname is string &&
               data.name is string &&
               data.phone is string &&
               data.gender is string &&
               data.role is string &&
               data.uid is string &&
               data.isPhoneVerified is bool &&
               data.createdAt is timestamp &&
               data.lastActive is timestamp;
      }

      function hasValidBikeFields() {
        let data = request.resource.data;
        return data.bikeManufacturer is string &&
               data.bikeName is string &&
               data.hasBikeInfo is bool &&
               data.lastUpdated is timestamp;
      }

      // 사용자별 유지보수 기록 서브컬렉션
      match /maintenance_records/{recordId} {
        function isValidMaintenanceRecord() {
          let data = request.resource.data;
          return
            data.userId is string &&
            data.userId == request.auth.uid &&
            data.partType is string &&
            data.maintenanceDate is string &&
            data.currentMileage is number;
        }

        allow read: if isAuthenticated() &&
                   request.auth.uid == userId;
        allow create: if isAuthenticated() &&
                     request.auth.uid == userId &&
                     isValidMaintenanceRecord();
        allow update: if isAuthenticated() &&
                     request.auth.uid == userId &&
                     isValidMaintenanceRecord();
        allow delete: if isAuthenticated() &&
                     request.auth.uid == userId;
      }

      // 모든 사용자가 사용자 문서를 읽을 수 있도록 수정
      allow read: if true;
      allow create: if isAuthenticated() &&
                   hasRequiredUserFields() &&
                   request.auth.uid == userId;
      allow update: if
          // 사용자가 자신의 정보를 수정하는 경우
          (isUserAuthenticated(userId))
          ||
          // 관리자 계정이 role 필드만 업데이트하는 경우
          (isAdminRole() &&
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role'])
          )
          ||
          // 친구 목록 필드만 업데이트하는 경우 (친구추가/삭제 기능)
          (isAuthenticated() && 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']) &&
           isValidFriendsList());
          
      // 친구 목록 필드 검증 함수 추가
      function isValidFriendsList() {
        let data = request.resource.data;
        return data.friends is list && 
               data.friends.size() <= 1000; // 친구 목록 최대 크기 제한
      }
      allow delete: if isUserAuthenticated(userId) || isAdminRole();
    }

    // ─────────────────────────────
    // 신고 컬렉션 규칙 추가
    // ─────────────────────────────
    match /reports/{reportId} {
      function isValidReport() {
        let data = request.resource.data;
        return data.reporterId is string &&
               data.reporterId == request.auth.uid &&
               data.reportedUserId is string &&
               data.reason is string &&
               data.type is string &&
               data.status is string &&
               data.timestamp is timestamp;
      }
      
      // 관리자만 모든 신고를 읽을 수 있음
      allow read: if isAuthenticated() && 
                 (resource.data.reporterId == request.auth.uid || isAdminRole());
      
      // 인증된 사용자는 신고를 생성할 수 있음
      allow create: if isAuthenticated() && isValidReport();
      
      // 관리자만 신고 상태를 업데이트할 수 있음
      allow update: if isAuthenticated() && isAdminRole();
      
      // 관리자만 신고를 삭제할 수 있음
      allow delete: if isAuthenticated() && isAdminRole();
    }

    // ─────────────────────────────
    // 사용자별 유지보수 주기 컬렉션 규칙
    // ─────────────────────────────
    match /users/{userId}/maintenance_periods/{partType} {
      allow read, write: if isAuthenticated() &&
                         request.auth.uid == userId;
    }

    // ─────────────────────────────
    // 채팅방 컬렉션 규칙
    // ─────────────────────────────
    match /chatRooms/{chatRoomId} {
      function isUserInParticipants(chatRoomId) {
        let roomData = get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data;
        // 미팅 채팅방인 경우
        return isAuthenticated() && (
          (chatRoomId.matches('^meeting_.*') &&
           exists(/databases/$(database)/documents/meetings/$(chatRoomId.replace('meeting_', '')))) ||
          // 일반 채팅방인 경우
          request.auth.uid in roomData.users
        );
      }

      function isValidChatRoom() {
        let data = request.resource.data;
        return data.users is list &&
               data.lastMessageTime is timestamp &&
               data.lastMessage is string &&
               (!data.keys().hasAny(['createdAt']) || data.createdAt is timestamp) &&
               (!data.keys().hasAny(['isGroupChat']) || data.isGroupChat is bool) &&
               (data.userDetails is map);
      }

      // 게스트 사용자에게도 읽기 권한 부여
      allow read: if true;
      allow list: if true;
      
      allow create: if isAuthenticated() &&
                   isValidChatRoom() &&
                   request.auth.uid in request.resource.data.users;
      allow update: if isAuthenticated() &&
                   request.auth.uid in resource.data.users &&
                   isValidChatRoom();
      allow delete: if false;

      match /messages/{messageId} {
        function isValidMessage() {
          let data = request.resource.data;
          return data.senderId == request.auth.uid &&
                 data.senderName is string &&
                 (data.timestamp == request.time || data.timestamp is timestamp) &&
                 (
                   (data.type == 'text' && data.message is string) ||
                   (data.type == 'image' && data.imageUrl is string)
                 );
        }

        // 메시지도 읽기 권한 게스트에게 부여
        allow read: if true;
        allow create: if isUserInParticipants(chatRoomId) &&
                       isValidMessage();
        allow update: if isUserInParticipants(chatRoomId);
        allow delete: if false;
      }

      match /typingStatus/{userId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
                    request.auth.uid == userId &&
                    isUserInParticipants(chatRoomId);
      }

      match /readStatus/{userId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
                    request.auth.uid == userId &&
                    isUserInParticipants(chatRoomId);
      }

      match /attachments/{attachmentId} {
        function isValidAttachment() {
          let data = request.resource.data;
          return data.senderId == request.auth.uid &&
                 data.filename is string &&
                 data.url is string &&
                 data.type is string &&
                 data.size is number &&
                 data.timestamp is timestamp;
        }

        allow read: if true;
        allow create: if isUserInParticipants(chatRoomId) &&
                     isValidAttachment();
        allow update, delete: if false;
      }
    }

    // ─────────────────────────────
    // 일반 유지보수 기록 컬렉션 (users 외부)
    // ─────────────────────────────
    match /maintenance_records/{recordId} {
      function isValidMaintenanceRecord() {
        let data = request.resource.data;
        return
          data.userId is string &&
          data.userId == request.auth.uid &&
          data.partType is string &&
          data.maintenanceDate is string &&
          data.currentMileage is number;
      }

      allow read: if isAuthenticated() &&
                 resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
                   isValidMaintenanceRecord();
      allow update: if isAuthenticated() &&
                   resource.data.userId == request.auth.uid &&
                   isValidMaintenanceRecord();
      allow delete: if isAuthenticated() &&
                   resource.data.userId == request.auth.uid;
    }

    // ─────────────────────────────
    // 사용자별 연비 기록 컬렉션
    // ─────────────────────────────
    match /users/{userId}/fuel_records/{recordId} {
      function isValidFuelRecord() {
        let data = request.resource.data;
        return
          data.userId is string &&
          data.userId == request.auth.uid &&
          data.recordDate is string &&  // ISO8601 문자열 형식으로
          data.distance is number &&    // 주행거리
          data.amount is number;        // 주유량
      }

      allow read: if isAuthenticated() &&
                 request.auth.uid == userId;
      allow create: if isAuthenticated() &&
                   request.auth.uid == userId;
      allow update: if isAuthenticated() &&
                   request.auth.uid == userId;
      allow delete: if isAuthenticated() &&
                   request.auth.uid == userId;
    }

    // ─────────────────────────────
    // 배너 컬렉션 규칙
    // ─────────────────────────────
    match /banners/{bannerId} {
      function isValidBanner() {
        let data = request.resource.data;
        return
          data.title is string &&
          data.imageUrl is string &&
          data.startDateTime is timestamp &&
          data.endDateTime is timestamp &&
          data.isActive is bool &&
          (!data.keys().hasAny(['createdAt']) || data.createdAt is timestamp);
      }

      allow read: if true;
      allow create: if isAuthenticated() &&
                   isAdminRole() &&
                   isValidBanner();
      allow update: if isAuthenticated() &&
                   isAdminRole() &&
                   isValidBanner();
      allow delete: if isAuthenticated() &&
                   isAdminRole();
    }

    // ─────────────────────────────
    // 알림 컬렉션 규칙
    // ─────────────────────────────
    match /notifications/{notificationId} {
      allow read: if request.auth != null &&
                   resource.data.userId == request.auth.uid;
      // 인증된 사용자는 알림을 생성할 수 있음 (친구추가, 친구 차단 등)
      allow create: if request.auth != null;
      // 사용자는 자신의 알림만 업데이트/삭제할 수 있음
      allow update, delete: if request.auth != null &&
                           resource.data.userId == request.auth.uid;
    }

    // ─────────────────────────────
    // 게시물 컬렉션 규칙
    // ─────────────────────────────
    match /posts/{postId} {
      function isValidPost() {
        let data = request.resource.data;
        // 허용되는 카테고리 배열 정의
        let validCategories = ['자유게시판', '바리·카페', '질문·답변', '공지사항'];
        
        return
          data.userId is string &&
          data.title is string &&
          data.content is string &&
          data.category is string &&
          data.category in validCategories && // 카테고리 유효성 검사 추가
          data.createdAt is timestamp &&
          (!data.keys().hasAny(['viewCount']) || data.viewCount is number);
      }
      
      // 게시물 읽기 권한 설정
      allow read: if true;
      
      // 게시물 생성 권한 설정
      allow create: if isAuthenticated() && isValidPost() && 
                   (
                     // 공지사항은 관리자만 작성 가능
                     (request.resource.data.category == '공지사항' && isAdminRole()) ||
                     // 질문답변은 관리자와 일반 사용자 모두 작성 가능
                     (request.resource.data.category == '질문·답변') ||
                     // 나머지 카테고리는 일반 사용자도 작성 가능
                     (request.resource.data.category != '공지사항' && request.resource.data.category != '질문·답변')
                   );
      
      // 게시물 수정 권한 설정
      allow update: if isAuthenticated() && 
                    (
                      // 관리자는 모든 게시물 수정 가능
                      isAdminRole() || 
                      // 자신의 게시물만 수정 가능 (공지사항 제외)
                      (request.auth.uid == resource.data.userId && resource.data.category != '공지사항') ||
                      // viewCount 필드만 업데이트하는 경우에는 누구나 가능
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount'])
                    );
      // Post delete permissions
			allow delete: if isAuthenticated() &&
              (isAdminRole() || request.auth.uid == resource.data.userId);

      match /likes/{userId} {
        allow read: if true;
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }

      match /comments/{commentId} {
        // 댓글 읽기 권한 설정
        allow read: if 
          // 질문답변 카테고리의 경우 작성자와 관리자만 읽기 가능
          (get(/databases/$(database)/documents/posts/$(postId)).data.category == '질문·답변' && 
           (request.auth.uid == resource.data.userId || isAdminRole())) ||
          // 다른 카테고리는 모두 읽기 가능
          (get(/databases/$(database)/documents/posts/$(postId)).data.category != '질문·답변');
        
        // 댓글 쓰기 권한 설정
        allow create: if isAuthenticated() && 
                      // 공지사항에는 댓글 작성 불가
                      get(/databases/$(database)/documents/posts/$(postId)).data.category != '공지사항';
        
        // 댓글 수정 권한 설정
        allow update: if isAuthenticated() && 
                      (request.auth.uid == resource.data.userId || isAdminRole());
        
        // 댓글 삭제 권한 설정
        allow delete: if isAuthenticated() && 
                      (request.auth.uid == resource.data.userId || isAdminRole());

        // 댓글 신고 컬렉션 추가
        match /reports/{reporterId} {
          allow read: if isAuthenticated() && isAdminRole();
          allow create: if isAuthenticated() && request.auth.uid == reporterId;
          allow update: if isAuthenticated() && isAdminRole();
          allow delete: if isAuthenticated() && isAdminRole();
        }
      }

      // 게시물 신고 컬렉션 추가
      match /reports/{reporterId} {
        allow read: if isAuthenticated() && isAdminRole();
        allow create: if isAuthenticated() && request.auth.uid == reporterId;
        allow update: if isAuthenticated() && isAdminRole();
        allow delete: if isAuthenticated() && isAdminRole();
      }
    }

    // ─────────────────────────────
    // 신고된 콘텐츠 컬렉션 규칙 추가
    // ─────────────────────────────
    match /reportedContent/{reportId} {
      allow read: if isAuthenticated() && isAdminRole();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isAdminRole();
      allow delete: if isAuthenticated() && isAdminRole();
    }

    // ─────────────────────────────
    // 라이더 카페 컬렉션 규칙
    // ─────────────────────────────
    match /cafes/{cafeId} {
      function isValidCafe() {
        let data = request.resource.data;
        return
          data.name is string &&
          data.address is string &&
          (!data.keys().hasAny(['addressDetail']) || data.addressDetail is string) &&
          data.location is latlng &&
          (!data.keys().hasAny(['description']) || data.description is string) &&
          (!data.keys().hasAny(['imageUrl']) || data.imageUrl is string) &&
          (!data.keys().hasAny(['rating']) || data.rating is number) &&
          (!data.keys().hasAny(['reviewCount']) || data.reviewCount is number) &&
          (!data.keys().hasAny(['createdAt']) || data.createdAt is timestamp) &&
          (!data.keys().hasAny(['createdBy']) || data.createdBy is string);
      }

      allow read: if true;
      allow create: if isAuthenticated() &&
                   isAdminRole() &&
                   isValidCafe();
      allow update: if isAuthenticated() &&
                   isAdminRole() &&
                   isValidCafe();
      allow delete: if isAuthenticated() &&
                   isAdminRole();

      match /reviews/{reviewId} {
        function isValidReview() {
          let data = request.resource.data;
          return
            data.userId is string &&
            data.userId == request.auth.uid &&
            data.nickname is string &&
            data.rating is number &&
            data.rating >= 1 &&
            data.rating <= 5 &&
            data.content is string &&
            data.content.size() > 0 &&
            (!data.keys().hasAny(['createdAt']) || data.createdAt is timestamp);
        }

        allow read: if true;
        allow create: if isAuthenticated() &&
                     isValidReview() &&
                     request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() &&
                     resource.data.userId == request.auth.uid &&
                     isValidReview();
        allow delete: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdminRole());
      }
    }

    // ─────────────────────────────
    // 번개모임 컬렉션 규칙 (출발지 및 목적지 필드를 세분화)
    // ─────────────────────────────
    match /meetings/{meetingId} {
      function isValidMeeting() {
        let data = request.resource.data;
        return
          data.hostId is string &&
          data.hostName is string &&
          data.departureAddress is string &&
          data.departureDetailAddress is string &&
          data.destinationAddress is string &&
          data.destinationDetailAddress is string &&
          data.meetingTime is timestamp &&
          data.location is latlng &&
          data.participants is list &&
          data.status is string &&
          (!data.keys().hasAny(['createdAt']) || data.createdAt is timestamp) &&
          (!data.keys().hasAny(['lastMessage']) || data.lastMessage is string) &&
          (!data.keys().hasAny(['chatRoomId']) || data.chatRoomId is string);
      }

      // 게스트 사용자도 모임 목록을 볼 수 있게 함
      allow read: if true;
      allow create: if isAuthenticated() &&
                   isValidMeeting() &&
                   request.resource.data.hostId == request.auth.uid;
      allow update: if isAuthenticated() &&
                   (resource.data.hostId == request.auth.uid ||
                    request.auth.uid in resource.data.participants);
      allow delete: if isAuthenticated() &&
                   (resource.data.hostId == request.auth.uid || isAdminRole());

      match /requests/{requestId} {
        function isValidRequest() {
          let data = request.resource.data;
          return
            data.userId is string &&
            data.status in ['pending', 'approved', 'rejected'] &&
            (!data.keys().hasAny(['createdAt']) || data.createdAt is timestamp);
        }

        function isValidRequestUpdate() {
          return resource.data.status == 'pending' &&
                 request.resource.data.status in ['approved', 'rejected'];
        }

        // 읽기 권한 게스트에게 부여
        allow read: if true;

        allow create: if isAuthenticated() &&
          isValidRequest() &&
          request.resource.data.userId == request.auth.uid;

        allow update: if isAuthenticated() && (
          get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid &&
          resource.data.status == 'pending' &&
          isValidRequestUpdate()
        );

        allow delete: if isAuthenticated() && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid
        );
      }

      match /participants/{participantId} {
        function isValidParticipant() {
          let data = request.resource.data;
          return
            data.userId is string &&
            data.nickname is string &&
            data.joinedAt is timestamp &&
            (!data.keys().hasAny(['profileImage']) || data.profileImage is string);
        }

        // 참여자 정보 게스트도 볼 수 있게 함
        allow read: if true;
        allow create: if isAuthenticated() &&
                     isValidParticipant() &&
                     request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() &&
                     resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid ||
                      get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid);
      }

      match /comments/{commentId} {
        function isValidComment() {
          let data = request.resource.data;
          return
            data.userId is string &&
            data.userId == request.auth.uid &&
            data.nickname is string &&
            data.content is string &&
            data.content.size() > 0 &&
            data.createdAt is timestamp;
        }

        // 댓글도 게스트가 볼 수 있게 함
        allow read: if true;
        allow create: if isAuthenticated() &&
                     isValidComment() &&
                     request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() &&
                     resource.data.userId == request.auth.uid &&
                     isValidComment();
        allow delete: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid ||
                      get(/databases/$(database)/documents/meetings/$(meetingId)).data.hostId == request.auth.uid);
      }
    }

    // ─────────────────────────────
    // admin_requests 컬렉션 규칙
    // ─────────────────────────────
    match /admin_requests/{requestId} {
      function isValidRequest() {
        let data = request.resource.data;
        return
          data.userId is string &&
          data.userId == request.auth.uid &&
          data.email is string &&
          data.name is string &&
          data.phone is string &&
          data.reason is string &&
          data.status in ['pending', 'approved', 'rejected'] &&
          (!data.keys().hasAny(['createdAt']) || data.createdAt is timestamp);
      }

      allow read: if isAuthenticated() &&
                 (resource.data.userId == request.auth.uid || isAdminRole());
      allow create: if isAuthenticated() &&
                   isValidRequest();
      allow update: if isAuthenticated() &&
                   isAdminRole();
      allow delete: if isAdminRole();
    }

    // ─────────────────────────────
    // 사용자별 알림 컬렉션
    // ─────────────────────────────
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdminRole()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdminRole()
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdminRole()
      );
    }

    // ─────────────────────────────
    // settings 컬렉션 (시스템 설정)
    // ─────────────────────────────
    match /settings/{settingId} {
      // 모든 사용자가 읽을 수 있으나 관리자만 쓸 수 있음
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdminRole();
    }
    
    // ─────────────────────────────
    // 차량 제조사 및 모델 컬렉션
    // ─────────────────────────────
    match /car_manufacturers/{manufacturerId} {
      // 제조사 정보는 인증 없이 모든 사용자가 읽을 수 있음
      allow read: if true;
      
      // 제조사 정보는 마스터 관리자만 추가 가능하며, 수정/삭제 불가
      allow create: if isAuthenticated() && isMasterRole();
      allow update, delete: if false; // 제조사 데이터는 수정/삭제 불가
    }
    
    match /car_models/{modelId} {
      function isValidCarModel() {
        let data = request.resource.data;
        return 
          data.id is string &&
          data.model is string &&
          data.manufacturerId is string;
      }
      
      // 모델 정보는 인증 없이 모든 사용자가 읽을 수 있음
      allow read: if true;
      
      // 모델 정보는 관리자만 추가/수정/삭제 가능
      allow create, update: if isAuthenticated() && 
                          isAdminRole() && 
                          isValidCarModel();
      allow delete: if isAuthenticated() && isAdminRole();
    }

    // 계정 삭제 요청은 사용자가 생성만 가능하고, 관리자만 읽을 수 있음
    match /deleteRequests/{requestId} {
      allow create: if true;
      allow read, update, delete: if request.auth != null && isAdminRole();
    }

  }
}
